ou seja, gripe
#!/usr/bin/python2.7
'''

create settings and scripts to run esorex:

esorex --config=esorex.cfg --recipe-config=51Peg_UVESredchain.cfg recipe sofSettings.sof

'''
__author__ = 'jmartins'

#======================================================================================================================
#   Python Modules
#======================================================================================================================
import os, sys
from astropy.io import fits

#======================================================================================================================
#   User Modules
#======================================================================================================================

from bin.classificationRules import *
from bin.manipFiles import fnCreateFolder

#======================================================================================================================
#   Settings
#======================================================================================================================
# rawDataFolder   =   sys.argv[1]
# recipeName      =   sys.argv[2]
settings = __import__(sys.argv[1].split('.')[0])

# Defining folders
baseRawDataFolder = os.path.abspath('./RawData/{}'.format(settings.rawDataFolder))
fnCreateFolder('./reduced/{}/'.format( settings.rawDataFolder))

rawFileList = [fileName for fileName in os.listdir(baseRawDataFolder) if fileName.endswith('.fits')]
calibFileList = [fileName for fileName in os.listdir('./RawData/UVESCalibrationFiles/') if fileName.endswith('.fits')]

# defining filenames
sofSettings = './scripts/rawFiles2Reduce_{}.sof'.format(settings.rawDataFolder)
esorexSettings = './scripts/customESOREX_{}.cfg'.format(settings.rawDataFolder)
recipeSettings = './scripts/customRecipe_{}.cfg'.format(settings.rawDataFolder)
esorexCommandFilename = './{}'.format(settings.outputScriptFile)

#======================================================================================================================
#   Main
#======================================================================================================================

def __main__():


    # Create settings for esorex
    with open('./scripts/defaults/esorex.cfg') as defaultEsorexFile:
        defaultEsorex = defaultEsorexFile.read()

    customESOREX = defaultEsorex.replace('DEFAULT_OUTPUT_DIR', './reduced/{}/'.format( settings.rawDataFolder))
    customESOREX = customESOREX.replace('DEFAULT_OUTPUT_PREFIX', settings.rawDataFolder)



    with open(esorexSettings,'w') as customEsorexFile:
        customEsorexFile.write(customESOREX)

    print '\n\ncustom esorex settings file has been created: {}\n\n'.format(esorexSettings)

    # create settings for recipe
    with open('./scripts/defaults/{}.cfg'.format(settings.recipeName)) as defaultRecipeFile:
        customRecipe = defaultRecipeFile.read()

    with open(recipeSettings,'w') as customRecipeFile:
        customRecipeFile.write(customRecipe)



    # Create SOF files for esorex
    sofFileString = ''
    for fileName in rawFileList:
        headerOri  =   fits.getheader('{}/{}'.format(baseRawDataFolder, fileName))
        if not ('ACQUISITION' in headerOri['HIERARCH ESO DPR CATG']):
            header = fnClassificationRules_UVES(headerOri)
            sofFileString   +=  '{}/{}\t{}\n'.format(baseRawDataFolder,fileName, header['D0.CATG'])

    for fileName in calibFileList:
        headerSTDCalib  =   fits.getheader('./RawData/UVESCalibrationFiles/{}'.format(fileName))
        sofFileString   +=  './RawData/UVESCalibrationFiles/{}\t{}\n'.format(fileName, headerSTDCalib['HIERARCH ESO PRO CATG'])

    with open(sofSettings,'w') as sofFile:
        sofFile.write(sofFileString)

    print '\n\nlist of raw data files to be reduced has been created: {}\n\n'.format(sofSettings)



    # full esorex command
    esorexCommand = 'esorex --config={0} --recipe-config={1} {2} {3} \n'.format(esorexSettings, recipeSettings,settings.recipeName, sofSettings )


    with open(esorexCommandFilename,'a') as esorexCommandFile:
        esorexCommandFile.write(esorexCommand)


    print '\n\nto reduce your data please run: {}\n\n{}\n'.format(esorexCommandFilename , esorexCommand)






#======================================================================================================================
#   RunTime
#======================================================================================================================
if __name__ == '__main__':

     __main__()



